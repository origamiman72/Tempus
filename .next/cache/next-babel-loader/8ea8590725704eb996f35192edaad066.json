{"ast":null,"code":"const jwt = require('jsonwebtoken');\n\nconst jwtSecret = 'SUPERSECRETE20220';\nexport default ((req, res) => {\n  if (req.method === 'GET') {\n    if (!('token' in req.cookies)) {\n      res.status(401).json({\n        message: 'Unable to auth'\n      });\n      return;\n    }\n\n    let decoded;\n    const token = req.cookies.token;\n\n    if (token) {\n      try {\n        decoded = jwt.verify(token, jwtSecret);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    if (decoded) {\n      res.json(decoded);\n      return;\n    } else {\n      res.status(401).json({\n        message: 'Unable to auth'\n      });\n    }\n  }\n});","map":{"version":3,"sources":["/Users/vinay.prasad/Desktop/dev/mh-app/Tempus/pages/api/me.jsx"],"names":["jwt","require","jwtSecret","req","res","method","cookies","status","json","message","decoded","token","verify","e","console","error"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAMC,SAAS,GAAG,mBAAlB;AAEA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC3B,MAAID,GAAG,CAACE,MAAJ,KAAe,KAAnB,EAA0B;AACxB,QAAI,EAAE,WAAWF,GAAG,CAACG,OAAjB,CAAJ,EAA+B;AAC7BF,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,OAAO,EAAE;AAAV,OAArB;AACA;AACD;;AACD,QAAIC,OAAJ;AACA,UAAMC,KAAK,GAAGR,GAAG,CAACG,OAAJ,CAAYK,KAA1B;;AACA,QAAIA,KAAJ,EAAW;AACT,UAAI;AACFD,QAAAA,OAAO,GAAGV,GAAG,CAACY,MAAJ,CAAWD,KAAX,EAAkBT,SAAlB,CAAV;AACD,OAFD,CAEE,OAAOW,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF;;AAED,QAAIH,OAAJ,EAAa;AACXN,MAAAA,GAAG,CAACI,IAAJ,CAASE,OAAT;AACA;AACD,KAHD,MAGO;AACLN,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,OAAO,EAAE;AAAV,OAArB;AACD;AACF;AACF,CAvBD","sourcesContent":["const jwt = require('jsonwebtoken');\nconst jwtSecret = 'SUPERSECRETE20220';\n\nexport default (req, res) => {\n  if (req.method === 'GET') {\n    if (!('token' in req.cookies)) {\n      res.status(401).json({message: 'Unable to auth'});\n      return;\n    }\n    let decoded;\n    const token = req.cookies.token;\n    if (token) {\n      try {\n        decoded = jwt.verify(token, jwtSecret);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    if (decoded) {\n      res.json(decoded);\n      return;\n    } else {\n      res.status(401).json({message: 'Unable to auth'});\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}