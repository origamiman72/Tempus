{"ast":null,"code":"const MongoClient = require('mongodb').MongoClient;\n\nconst assert = require('assert');\n\nconst bcrypt = require('bcrypt');\n\nconst jwt = require('jsonwebtoken');\n\nrequire('dotenv').config();\n\nconst jwtSecret = 'SUPERSECRETE20220';\nconst saltRounds = 10;\nconst dbName = 'simple-login-db';\nconsole.log(process.env.DATABASE_URL);\nconst client = new MongoClient(process.env.DATABASE_URL, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\nfunction findUser(db, email, callback) {\n  const collection = db.collection('user');\n  collection.findOne({\n    email\n  }, callback);\n}\n\nfunction authUser(db, email, password, hash, callback) {\n  const collection = db.collection('user');\n  bcrypt.compare(password, hash, callback);\n}\n\nexport default ((req, res) => {\n  if (req.method === 'POST') {\n    //login\n    try {\n      assert.notEqual(null, req.body.email, 'Email required');\n      assert.notEqual(null, req.body.password, 'Password required');\n    } catch (bodyError) {\n      res.status(403).send(bodyError.message);\n    }\n\n    client.connect(function (err) {\n      assert.equal(null, err);\n      console.log('Connected to MongoDB server =>');\n      const db = client.db(dbName);\n      const email = req.body.email;\n      const password = req.body.password;\n      findUser(db, email, function (err, user) {\n        if (err) {\n          res.status(500).json({\n            error: true,\n            message: 'Error finding User'\n          });\n          return;\n        }\n\n        if (!user) {\n          res.status(404).json({\n            error: true,\n            message: 'You have not signed up with us yet :('\n          });\n          return;\n        } else {\n          authUser(db, email, password, user.password, function (err, match) {\n            if (err) {\n              res.status(500).json({\n                error: true,\n                message: 'Authentification Failed'\n              });\n            }\n\n            if (match) {\n              const token = jwt.sign({\n                userId: user.userId,\n                email: user.email\n              }, jwtSecret, {\n                expiresIn: 3000 //50 minutes\n\n              });\n              res.status(200).json({\n                token\n              });\n              return;\n            } else {\n              res.status(401).json({\n                error: true,\n                message: 'Please check your email or password again!'\n              });\n              return;\n            }\n          });\n        }\n      });\n    });\n  } else {\n    // Handle any other HTTP method\n    res.statusCode = 401;\n    res.end();\n  }\n});","map":{"version":3,"sources":["/Users/vinay.prasad/Desktop/dev/mh-app/Tempus/pages/api/auth.jsx"],"names":["MongoClient","require","assert","bcrypt","jwt","config","jwtSecret","saltRounds","dbName","console","log","process","env","DATABASE_URL","client","useNewUrlParser","useUnifiedTopology","findUser","db","email","callback","collection","findOne","authUser","password","hash","compare","req","res","method","notEqual","body","bodyError","status","send","message","connect","err","equal","user","json","error","match","token","sign","userId","expiresIn","statusCode","end"],"mappings":"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","sourcesContent":["const MongoClient = require('mongodb').MongoClient;\nconst assert = require('assert');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nrequire('dotenv').config()\n\nconst jwtSecret = 'SUPERSECRETE20220';\n\nconst saltRounds = 10;\nconst dbName = 'simple-login-db';\n\n\nconsole.log(process.env.DATABASE_URL)\n\n\nconst client = new MongoClient(process.env.DATABASE_URL, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nfunction findUser(db, email, callback) {\n  const collection = db.collection('user');\n  collection.findOne({email}, callback);\n}\n\nfunction authUser(db, email, password, hash, callback) {\n  const collection = db.collection('user');\n  bcrypt.compare(password, hash, callback);\n}\n\nexport default (req, res) => {\n  if (req.method === 'POST') {\n    //login\n    try {\n      assert.notEqual(null, req.body.email, 'Email required');\n      assert.notEqual(null, req.body.password, 'Password required');\n    } catch (bodyError) {\n      res.status(403).send(bodyError.message);\n    }\n\n    client.connect(function(err) {\n      assert.equal(null, err);\n      console.log('Connected to MongoDB server =>');\n      const db = client.db(dbName);\n      const email = req.body.email;\n      const password = req.body.password;\n\n      findUser(db, email, function(err, user) {\n        if (err) {\n          res.status(500).json({error: true, message: 'Error finding User'});\n          return;\n        }\n        if (!user) {\n          res.status(404).json({error: true, message: 'You have not signed up with us yet :('});\n          return;\n        } else {\n          authUser(db, email, password, user.password, function(err, match) {\n            if (err) {\n              res.status(500).json({error: true, message: 'Authentification Failed'});\n            }\n            if (match) {\n              const token = jwt.sign(\n                {userId: user.userId, email: user.email},\n                jwtSecret,\n                {\n                  expiresIn: 3000, //50 minutes\n                },\n              );\n              res.status(200).json({token});\n              return;\n            } else {\n              res.status(401).json({error: true, message: 'Please check your email or password again!'});\n              return;\n            }\n          });\n        }\n      });\n    });\n  } else {\n    // Handle any other HTTP method\n    res.statusCode = 401;\n    res.end();\n  }\n};"]},"metadata":{},"sourceType":"module"}